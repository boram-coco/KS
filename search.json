[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Kaggle Study",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nDec 19, 2023\n\n\n[Kaggle] Santander Product Recommendation Competition\n\n\n김보람 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Santander_ver1.html",
    "href": "posts/Santander_ver1.html",
    "title": "[Kaggle] Santander Product Recommendation Competition",
    "section": "",
    "text": "[Kaggle] Santander Product Recommendation Competition\nkaggle 우승작으로 배우는 머신러닝 탐구생활"
  },
  {
    "objectID": "posts/Santander_ver1.html#수치형-변수",
    "href": "posts/Santander_ver1.html#수치형-변수",
    "title": "[Kaggle] Santander Product Recommendation Competition",
    "section": "수치형 변수",
    "text": "수치형 변수\n\nnum_cols = [col for col in df_train.columns[:24] if df_train[col].dtype in ['int64','float64']]\ndf_train[num_cols].describe()\n\n\n\n\n\n\n\n\nncodpers\nind_nuevo\nindrel\ntipodom\ncod_prov\nind_actividad_cliente\nrenta\n\n\n\n\ncount\n1.364731e+07\n1.361958e+07\n1.361958e+07\n13619574.0\n1.355372e+07\n1.361958e+07\n1.085293e+07\n\n\nmean\n8.349042e+05\n5.956184e-02\n1.178399e+00\n1.0\n2.657147e+01\n4.578105e-01\n1.342543e+05\n\n\nstd\n4.315650e+05\n2.366733e-01\n4.177469e+00\n0.0\n1.278402e+01\n4.982169e-01\n2.306202e+05\n\n\nmin\n1.588900e+04\n0.000000e+00\n1.000000e+00\n1.0\n1.000000e+00\n0.000000e+00\n1.202730e+03\n\n\n25%\n4.528130e+05\n0.000000e+00\n1.000000e+00\n1.0\n1.500000e+01\n0.000000e+00\n6.871098e+04\n\n\n50%\n9.318930e+05\n0.000000e+00\n1.000000e+00\n1.0\n2.800000e+01\n0.000000e+00\n1.018500e+05\n\n\n75%\n1.199286e+06\n0.000000e+00\n1.000000e+00\n1.0\n3.500000e+01\n1.000000e+00\n1.559560e+05\n\n\nmax\n1.553689e+06\n1.000000e+00\n9.900000e+01\n1.0\n5.200000e+01\n1.000000e+00\n2.889440e+07"
  },
  {
    "objectID": "posts/Santander_ver1.html#범주형-변수",
    "href": "posts/Santander_ver1.html#범주형-변수",
    "title": "[Kaggle] Santander Product Recommendation Competition",
    "section": "범주형 변수",
    "text": "범주형 변수\n\ncat_cols = [col for col in df_train.columns[:24] if df_train[col].dtype in ['object']]\ndf_train[cat_cols].describe()\n\n\n\n\n\n\n\n\nfecha_dato\nind_empleado\npais_residencia\nsexo\nage\nfecha_alta\nantiguedad\nult_fec_cli_1t\nindrel_1mes\ntiprel_1mes\nindresi\nindext\nconyuemp\ncanal_entrada\nindfall\nnomprov\nsegmento\n\n\n\n\ncount\n13647309\n13619575\n13619575\n13619505\n13647309\n13619575\n13647309\n24793\n13497528.0\n13497528\n13619575\n13619575\n1808\n13461183\n13619575\n13553718\n13457941\n\n\nunique\n17\n5\n118\n2\n235\n6756\n507\n223\n13.0\n5\n2\n2\n2\n162\n2\n52\n3\n\n\ntop\n2016-05-28\nN\nES\nV\n23\n2014-07-28\n0\n2015-12-24\n1.0\nI\nS\nN\nN\nKHE\nN\nMADRID\n02 - PARTICULARES\n\n\nfreq\n931453\n13610977\n13553710\n7424252\n542682\n57389\n134335\n763\n7277607.0\n7304875\n13553711\n12974839\n1791\n4055270\n13584813\n4409600\n7960220\n\n\n\n\n\n\n\n- 고유값\n\nfor col in cat_cols:\n    uniq = np.unique(df_train[col].astype(str))\n    print('-' * 50)\n    print('# col {}, n_uniq {}, uniq {}'.format(col, len(uniq), uniq))\n\n--------------------------------------------------\n# col fecha_dato, n_uniq 17, uniq ['2015-01-28' '2015-02-28' '2015-03-28' '2015-04-28' '2015-05-28'\n '2015-06-28' '2015-07-28' '2015-08-28' '2015-09-28' '2015-10-28'\n '2015-11-28' '2015-12-28' '2016-01-28' '2016-02-28' '2016-03-28'\n '2016-04-28' '2016-05-28']\n--------------------------------------------------\n# col ind_empleado, n_uniq 6, uniq ['A' 'B' 'F' 'N' 'S' 'nan']\n--------------------------------------------------\n# col pais_residencia, n_uniq 119, uniq ['AD' 'AE' 'AL' 'AO' 'AR' 'AT' 'AU' 'BA' 'BE' 'BG' 'BM' 'BO' 'BR' 'BY'\n 'BZ' 'CA' 'CD' 'CF' 'CG' 'CH' 'CI' 'CL' 'CM' 'CN' 'CO' 'CR' 'CU' 'CZ'\n 'DE' 'DJ' 'DK' 'DO' 'DZ' 'EC' 'EE' 'EG' 'ES' 'ET' 'FI' 'FR' 'GA' 'GB'\n 'GE' 'GH' 'GI' 'GM' 'GN' 'GQ' 'GR' 'GT' 'GW' 'HK' 'HN' 'HR' 'HU' 'IE'\n 'IL' 'IN' 'IS' 'IT' 'JM' 'JP' 'KE' 'KH' 'KR' 'KW' 'KZ' 'LB' 'LT' 'LU'\n 'LV' 'LY' 'MA' 'MD' 'MK' 'ML' 'MM' 'MR' 'MT' 'MX' 'MZ' 'NG' 'NI' 'NL'\n 'NO' 'NZ' 'OM' 'PA' 'PE' 'PH' 'PK' 'PL' 'PR' 'PT' 'PY' 'QA' 'RO' 'RS'\n 'RU' 'SA' 'SE' 'SG' 'SK' 'SL' 'SN' 'SV' 'TG' 'TH' 'TN' 'TR' 'TW' 'UA'\n 'US' 'UY' 'VE' 'VN' 'ZA' 'ZW' 'nan']\n--------------------------------------------------\n# col sexo, n_uniq 3, uniq ['H' 'V' 'nan']\n--------------------------------------------------\n# col age, n_uniq 219, uniq ['  2' '  3' '  4' '  5' '  6' '  7' '  8' '  9' ' 10' ' 11' ' 12' ' 13'\n ' 14' ' 15' ' 16' ' 17' ' 18' ' 19' ' 20' ' 21' ' 22' ' 23' ' 24' ' 25'\n ' 26' ' 27' ' 28' ' 29' ' 30' ' 31' ' 32' ' 33' ' 34' ' 35' ' 36' ' 37'\n ' 38' ' 39' ' 40' ' 41' ' 42' ' 43' ' 44' ' 45' ' 46' ' 47' ' 48' ' 49'\n ' 50' ' 51' ' 52' ' 53' ' 54' ' 55' ' 56' ' 57' ' 58' ' 59' ' 60' ' 61'\n ' 62' ' 63' ' 64' ' 65' ' 66' ' 67' ' 68' ' 69' ' 70' ' 71' ' 72' ' 73'\n ' 74' ' 75' ' 76' ' 77' ' 78' ' 79' ' 80' ' 81' ' 82' ' 83' ' 84' ' 85'\n ' 86' ' 87' ' 88' ' 89' ' 90' ' 91' ' 92' ' 93' ' 94' ' 95' ' 96' ' 97'\n ' 98' ' 99' ' NA' '10' '100' '101' '102' '103' '104' '105' '106' '107'\n '108' '109' '11' '110' '111' '112' '113' '114' '115' '116' '117' '12'\n '126' '127' '13' '14' '15' '16' '163' '164' '17' '18' '19' '2' '20' '21'\n '22' '23' '24' '25' '26' '27' '28' '29' '3' '30' '31' '32' '33' '34' '35'\n '36' '37' '38' '39' '4' '40' '41' '42' '43' '44' '45' '46' '47' '48' '49'\n '5' '50' '51' '52' '53' '54' '55' '56' '57' '58' '59' '6' '60' '61' '62'\n '63' '64' '65' '66' '67' '68' '69' '7' '70' '71' '72' '73' '74' '75' '76'\n '77' '78' '79' '8' '80' '81' '82' '83' '84' '85' '86' '87' '88' '89' '9'\n '90' '91' '92' '93' '94' '95' '96' '97' '98' '99']\n--------------------------------------------------\n# col fecha_alta, n_uniq 6757, uniq ['1995-01-16' '1995-01-17' '1995-01-23' ... '2016-05-30' '2016-05-31'\n 'nan']\n--------------------------------------------------\n# col antiguedad, n_uniq 506, uniq ['      0' '      1' '      2' '      3' '      4' '      5' '      6'\n '      7' '      8' '      9' '     10' '     11' '     12' '     13'\n '     14' '     15' '     16' '     17' '     18' '     19' '     20'\n '     21' '     22' '     23' '     24' '     25' '     26' '     27'\n '     28' '     29' '     30' '     31' '     32' '     33' '     34'\n '     35' '     36' '     37' '     38' '     39' '     40' '     41'\n '     42' '     43' '     44' '     45' '     46' '     47' '     48'\n '     49' '     50' '     51' '     52' '     53' '     54' '     55'\n '     56' '     57' '     58' '     59' '     60' '     61' '     62'\n '     63' '     64' '     65' '     66' '     67' '     68' '     69'\n '     70' '     71' '     72' '     73' '     74' '     75' '     76'\n '     77' '     78' '     79' '     80' '     81' '     82' '     83'\n '     84' '     85' '     86' '     87' '     88' '     89' '     90'\n '     91' '     92' '     93' '     94' '     95' '     96' '     97'\n '     98' '     99' '     NA' '    100' '    101' '    102' '    103'\n '    104' '    105' '    106' '    107' '    108' '    109' '    110'\n '    111' '    112' '    113' '    114' '    115' '    116' '    117'\n '    118' '    119' '    120' '    121' '    122' '    123' '    124'\n '    125' '    126' '    127' '    128' '    129' '    130' '    131'\n '    132' '    133' '    134' '    135' '    136' '    137' '    138'\n '    139' '    140' '    141' '    142' '    143' '    144' '    145'\n '    146' '    147' '    148' '    149' '    150' '    151' '    152'\n '    153' '    154' '    155' '    156' '    157' '    158' '    159'\n '    160' '    161' '    162' '    163' '    164' '    165' '    166'\n '    167' '    168' '    169' '    170' '    171' '    172' '    173'\n '    174' '    175' '    176' '    177' '    178' '    179' '    180'\n '    181' '    182' '    183' '    184' '    185' '    186' '    187'\n '    188' '    189' '    190' '    191' '    192' '    193' '    194'\n '    195' '    196' '    197' '    198' '    199' '    200' '    201'\n '    202' '    203' '    204' '    205' '    206' '    207' '    208'\n '    209' '    210' '    211' '    212' '    213' '    214' '    215'\n '    216' '    217' '    218' '    219' '    220' '    221' '    222'\n '    223' '    224' '    225' '    226' '    227' '    228' '    229'\n '    230' '    231' '    232' '    233' '    234' '    235' '    236'\n '    237' '    238' '    239' '    240' '    241' '    242' '    243'\n '    244' '    245' '    246' '-999999' '0' '1' '10' '100' '101' '102'\n '103' '104' '105' '106' '107' '108' '109' '11' '110' '111' '112' '113'\n '114' '115' '116' '117' '118' '119' '12' '120' '121' '122' '123' '124'\n '125' '126' '127' '128' '129' '13' '130' '131' '132' '133' '134' '135'\n '136' '137' '138' '139' '14' '140' '141' '142' '143' '144' '145' '146'\n '147' '148' '149' '15' '150' '151' '152' '153' '154' '155' '156' '157'\n '158' '159' '16' '160' '161' '162' '163' '164' '165' '166' '167' '168'\n '169' '17' '170' '171' '172' '173' '174' '175' '176' '177' '178' '179'\n '18' '180' '181' '182' '183' '184' '185' '186' '187' '188' '189' '19'\n '190' '191' '192' '193' '194' '195' '196' '197' '198' '199' '2' '20'\n '200' '201' '202' '203' '204' '205' '206' '207' '208' '209' '21' '210'\n '211' '212' '213' '214' '215' '216' '217' '218' '219' '22' '220' '221'\n '222' '223' '224' '225' '226' '227' '228' '229' '23' '230' '231' '232'\n '233' '234' '235' '236' '237' '238' '239' '24' '240' '241' '242' '243'\n '244' '245' '246' '247' '248' '249' '25' '250' '251' '252' '253' '254'\n '255' '256' '26' '27' '28' '29' '3' '30' '31' '32' '33' '34' '35' '36'\n '37' '38' '39' '4' '40' '41' '42' '43' '44' '45' '46' '47' '48' '49' '5'\n '50' '51' '52' '53' '54' '55' '56' '57' '58' '59' '6' '60' '61' '62' '63'\n '64' '65' '66' '67' '68' '69' '7' '70' '71' '72' '73' '74' '75' '76' '77'\n '78' '79' '8' '80' '81' '82' '83' '84' '85' '86' '87' '88' '89' '9' '90'\n '91' '92' '93' '94' '95' '96' '97' '98' '99']\n--------------------------------------------------\n# col ult_fec_cli_1t, n_uniq 224, uniq ['2015-07-01' '2015-07-02' '2015-07-03' '2015-07-06' '2015-07-07'\n '2015-07-08' '2015-07-09' '2015-07-10' '2015-07-13' '2015-07-14'\n '2015-07-15' '2015-07-16' '2015-07-17' '2015-07-20' '2015-07-21'\n '2015-07-22' '2015-07-23' '2015-07-24' '2015-07-27' '2015-07-28'\n '2015-07-29' '2015-07-30' '2015-08-03' '2015-08-04' '2015-08-05'\n '2015-08-06' '2015-08-07' '2015-08-10' '2015-08-11' '2015-08-12'\n '2015-08-13' '2015-08-14' '2015-08-17' '2015-08-18' '2015-08-19'\n '2015-08-20' '2015-08-21' '2015-08-24' '2015-08-25' '2015-08-26'\n '2015-08-27' '2015-08-28' '2015-09-01' '2015-09-02' '2015-09-03'\n '2015-09-04' '2015-09-07' '2015-09-08' '2015-09-09' '2015-09-10'\n '2015-09-11' '2015-09-14' '2015-09-15' '2015-09-16' '2015-09-17'\n '2015-09-18' '2015-09-21' '2015-09-22' '2015-09-23' '2015-09-24'\n '2015-09-25' '2015-09-28' '2015-09-29' '2015-10-01' '2015-10-02'\n '2015-10-05' '2015-10-06' '2015-10-07' '2015-10-08' '2015-10-09'\n '2015-10-13' '2015-10-14' '2015-10-15' '2015-10-16' '2015-10-19'\n '2015-10-20' '2015-10-21' '2015-10-22' '2015-10-23' '2015-10-26'\n '2015-10-27' '2015-10-28' '2015-10-29' '2015-11-02' '2015-11-03'\n '2015-11-04' '2015-11-05' '2015-11-06' '2015-11-09' '2015-11-10'\n '2015-11-11' '2015-11-12' '2015-11-13' '2015-11-16' '2015-11-17'\n '2015-11-18' '2015-11-19' '2015-11-20' '2015-11-23' '2015-11-24'\n '2015-11-25' '2015-11-26' '2015-11-27' '2015-12-01' '2015-12-02'\n '2015-12-03' '2015-12-04' '2015-12-07' '2015-12-09' '2015-12-10'\n '2015-12-11' '2015-12-14' '2015-12-15' '2015-12-16' '2015-12-17'\n '2015-12-18' '2015-12-21' '2015-12-22' '2015-12-23' '2015-12-24'\n '2015-12-28' '2015-12-29' '2015-12-30' '2016-01-04' '2016-01-05'\n '2016-01-07' '2016-01-08' '2016-01-11' '2016-01-12' '2016-01-13'\n '2016-01-14' '2016-01-15' '2016-01-18' '2016-01-19' '2016-01-20'\n '2016-01-21' '2016-01-22' '2016-01-25' '2016-01-26' '2016-01-27'\n '2016-01-28' '2016-02-01' '2016-02-02' '2016-02-03' '2016-02-04'\n '2016-02-05' '2016-02-08' '2016-02-09' '2016-02-10' '2016-02-11'\n '2016-02-12' '2016-02-15' '2016-02-16' '2016-02-17' '2016-02-18'\n '2016-02-19' '2016-02-22' '2016-02-23' '2016-02-24' '2016-02-25'\n '2016-02-26' '2016-03-01' '2016-03-02' '2016-03-03' '2016-03-04'\n '2016-03-07' '2016-03-08' '2016-03-09' '2016-03-10' '2016-03-11'\n '2016-03-14' '2016-03-15' '2016-03-16' '2016-03-17' '2016-03-18'\n '2016-03-21' '2016-03-22' '2016-03-23' '2016-03-24' '2016-03-28'\n '2016-03-29' '2016-03-30' '2016-04-01' '2016-04-04' '2016-04-05'\n '2016-04-06' '2016-04-07' '2016-04-08' '2016-04-11' '2016-04-12'\n '2016-04-13' '2016-04-14' '2016-04-15' '2016-04-18' '2016-04-19'\n '2016-04-20' '2016-04-21' '2016-04-22' '2016-04-25' '2016-04-26'\n '2016-04-27' '2016-04-28' '2016-05-02' '2016-05-03' '2016-05-04'\n '2016-05-05' '2016-05-06' '2016-05-09' '2016-05-10' '2016-05-11'\n '2016-05-12' '2016-05-13' '2016-05-16' '2016-05-17' '2016-05-18'\n '2016-05-19' '2016-05-20' '2016-05-23' '2016-05-24' '2016-05-25'\n '2016-05-26' '2016-05-27' '2016-05-30' 'nan']\n--------------------------------------------------\n# col indrel_1mes, n_uniq 10, uniq ['1' '1.0' '2' '2.0' '3' '3.0' '4' '4.0' 'P' 'nan']\n--------------------------------------------------\n# col tiprel_1mes, n_uniq 6, uniq ['A' 'I' 'N' 'P' 'R' 'nan']\n--------------------------------------------------\n# col indresi, n_uniq 3, uniq ['N' 'S' 'nan']\n--------------------------------------------------\n# col indext, n_uniq 3, uniq ['N' 'S' 'nan']\n--------------------------------------------------\n# col conyuemp, n_uniq 3, uniq ['N' 'S' 'nan']\n--------------------------------------------------\n# col canal_entrada, n_uniq 163, uniq ['004' '007' '013' '025' 'K00' 'KAA' 'KAB' 'KAC' 'KAD' 'KAE' 'KAF' 'KAG'\n 'KAH' 'KAI' 'KAJ' 'KAK' 'KAL' 'KAM' 'KAN' 'KAO' 'KAP' 'KAQ' 'KAR' 'KAS'\n 'KAT' 'KAU' 'KAV' 'KAW' 'KAY' 'KAZ' 'KBB' 'KBD' 'KBE' 'KBF' 'KBG' 'KBH'\n 'KBJ' 'KBL' 'KBM' 'KBN' 'KBO' 'KBP' 'KBQ' 'KBR' 'KBS' 'KBU' 'KBV' 'KBW'\n 'KBX' 'KBY' 'KBZ' 'KCA' 'KCB' 'KCC' 'KCD' 'KCE' 'KCF' 'KCG' 'KCH' 'KCI'\n 'KCJ' 'KCK' 'KCL' 'KCM' 'KCN' 'KCO' 'KCP' 'KCQ' 'KCR' 'KCS' 'KCT' 'KCU'\n 'KCV' 'KCX' 'KDA' 'KDB' 'KDC' 'KDD' 'KDE' 'KDF' 'KDG' 'KDH' 'KDI' 'KDL'\n 'KDM' 'KDN' 'KDO' 'KDP' 'KDQ' 'KDR' 'KDS' 'KDT' 'KDU' 'KDV' 'KDW' 'KDX'\n 'KDY' 'KDZ' 'KEA' 'KEB' 'KEC' 'KED' 'KEE' 'KEF' 'KEG' 'KEH' 'KEI' 'KEJ'\n 'KEK' 'KEL' 'KEM' 'KEN' 'KEO' 'KEQ' 'KES' 'KEU' 'KEV' 'KEW' 'KEY' 'KEZ'\n 'KFA' 'KFB' 'KFC' 'KFD' 'KFE' 'KFF' 'KFG' 'KFH' 'KFI' 'KFJ' 'KFK' 'KFL'\n 'KFM' 'KFN' 'KFP' 'KFR' 'KFS' 'KFT' 'KFU' 'KFV' 'KGC' 'KGN' 'KGU' 'KGV'\n 'KGW' 'KGX' 'KGY' 'KHA' 'KHC' 'KHD' 'KHE' 'KHF' 'KHK' 'KHL' 'KHM' 'KHN'\n 'KHO' 'KHP' 'KHQ' 'KHR' 'KHS' 'RED' 'nan']\n--------------------------------------------------\n# col indfall, n_uniq 3, uniq ['N' 'S' 'nan']\n--------------------------------------------------\n# col nomprov, n_uniq 53, uniq ['ALAVA' 'ALBACETE' 'ALICANTE' 'ALMERIA' 'ASTURIAS' 'AVILA' 'BADAJOZ'\n 'BALEARS, ILLES' 'BARCELONA' 'BIZKAIA' 'BURGOS' 'CACERES' 'CADIZ'\n 'CANTABRIA' 'CASTELLON' 'CEUTA' 'CIUDAD REAL' 'CORDOBA' 'CORUÑA, A'\n 'CUENCA' 'GIPUZKOA' 'GIRONA' 'GRANADA' 'GUADALAJARA' 'HUELVA' 'HUESCA'\n 'JAEN' 'LEON' 'LERIDA' 'LUGO' 'MADRID' 'MALAGA' 'MELILLA' 'MURCIA'\n 'NAVARRA' 'OURENSE' 'PALENCIA' 'PALMAS, LAS' 'PONTEVEDRA' 'RIOJA, LA'\n 'SALAMANCA' 'SANTA CRUZ DE TENERIFE' 'SEGOVIA' 'SEVILLA' 'SORIA'\n 'TARRAGONA' 'TERUEL' 'TOLEDO' 'VALENCIA' 'VALLADOLID' 'ZAMORA' 'ZARAGOZA'\n 'nan']\n--------------------------------------------------\n# col segmento, n_uniq 4, uniq ['01 - TOP' '02 - PARTICULARES' '03 - UNIVERSITARIO' 'nan']"
  },
  {
    "objectID": "posts/Santander_ver1.html#데이터-분석",
    "href": "posts/Santander_ver1.html#데이터-분석",
    "title": "[Kaggle] Santander Product Recommendation Competition",
    "section": "데이터 분석",
    "text": "데이터 분석\n\nfecha_dato: 년-월-일로 28일자를 기준으로 17개\nind_empleado: 결측치\npais_residencia: 나라(대문자 2개), 결측치\nsexo: 결측치\n\n,, 결측치 핵 많음\n\n\n\n변수명\n내용\n데이터 타입\n특징\n변수 아이디어\n\n\n\n\nfecha_data\n월별 날짜 데이터\nobject\n\n년도, 월 데이터 별도 추출\n\n\nage\n나이\nobeject -&gt;int\n\n나이데이터가 정수형이 아니므로 정제 필요\n\n\n\n\n위 내용은 책에서 정리한 거고.. 추후 이렇게 정리하는 분석 방법이 필요"
  },
  {
    "objectID": "posts/Santander_ver1.html#시각화",
    "href": "posts/Santander_ver1.html#시각화",
    "title": "[Kaggle] Santander Product Recommendation Competition",
    "section": "시각화",
    "text": "시각화\n\nskip_cols = ['ncodpers', 'renta'] # 고객 고유 식별 번호, 총 수입 (고유값 많으므로 제거)\nfor col in df_train.columns:\n    if col in skip_cols:\n        continue\n    \n    print('-' * 50)\n    print('col:',col)\n    \n    f, ax = plt.subplots(figsize=(20,15))\n    sns.countplot(x=col, data=df_train, alpha=0.5)\n    plt.show()\n\n--------------------------------------------------\ncol: fecha_dato\n--------------------------------------------------\ncol: ind_empleado\n--------------------------------------------------\ncol: pais_residencia\n--------------------------------------------------\ncol: sexo\n--------------------------------------------------\ncol: age\n--------------------------------------------------\ncol: fecha_alta\n--------------------------------------------------\ncol: ind_nuevo\n--------------------------------------------------\ncol: antiguedad\n--------------------------------------------------\ncol: indrel\n--------------------------------------------------\ncol: ult_fec_cli_1t\n--------------------------------------------------\ncol: indrel_1mes\n--------------------------------------------------\ncol: tiprel_1mes\n--------------------------------------------------\ncol: indresi\n--------------------------------------------------\ncol: indext\n--------------------------------------------------\ncol: conyuemp\n--------------------------------------------------\ncol: canal_entrada\n--------------------------------------------------\ncol: indfall\n--------------------------------------------------\ncol: tipodom\n--------------------------------------------------\ncol: cod_prov\n--------------------------------------------------\ncol: nomprov\n--------------------------------------------------\ncol: ind_actividad_cliente\n--------------------------------------------------\ncol: segmento\n--------------------------------------------------\ncol: ind_ahor_fin_ult1\n--------------------------------------------------\ncol: ind_aval_fin_ult1\n--------------------------------------------------\ncol: ind_cco_fin_ult1\n--------------------------------------------------\ncol: ind_cder_fin_ult1\n--------------------------------------------------\ncol: ind_cno_fin_ult1\n--------------------------------------------------\ncol: ind_ctju_fin_ult1\n--------------------------------------------------\ncol: ind_ctma_fin_ult1\n--------------------------------------------------\ncol: ind_ctop_fin_ult1\n--------------------------------------------------\ncol: ind_ctpp_fin_ult1\n--------------------------------------------------\ncol: ind_deco_fin_ult1\n--------------------------------------------------\ncol: ind_deme_fin_ult1\n--------------------------------------------------\ncol: ind_dela_fin_ult1\n--------------------------------------------------\ncol: ind_ecue_fin_ult1\n--------------------------------------------------\ncol: ind_fond_fin_ult1\n--------------------------------------------------\ncol: ind_hip_fin_ult1\n--------------------------------------------------\ncol: ind_plan_fin_ult1\n--------------------------------------------------\ncol: ind_pres_fin_ult1\n--------------------------------------------------\ncol: ind_reca_fin_ult1\n--------------------------------------------------\ncol: ind_tjcr_fin_ult1\n--------------------------------------------------\ncol: ind_valo_fin_ult1\n--------------------------------------------------\ncol: ind_viv_fin_ult1\n--------------------------------------------------\ncol: ind_nomina_ult1\n--------------------------------------------------\ncol: ind_nom_pens_ult1\n--------------------------------------------------\ncol: ind_recibo_ult1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n월별 금융 제품 보유 데이터 누적 막대 그래프 시각화\n\nlabel_over_time = []\nfor i in range(len(label_cols)):\n    label_sum = df_train.groupby(['fecha_dato'])[label_cols[i]].agg('sum')\n    label_over_time.append(label_sum.tolist())\n    \nlabel_sum_over_time = []\nfor i in range(len(label_cols)):\n    label_sum_over_time.append(np.asarray(label_over_time[i:]).sum(axis=0))\n\ncolor_list = ['#F5B7B1','#D2B4DE','#AED6F1','#A2D9CE','#ABEBC6','#F9E79F','#F5CBA7','#CCD1D1']\n\n\nf, ax = plt.subplots(figsize=(30, 15))\nfor i in range(len(label_cols)):\n    sns.barplot(x=months, y=label_sum_over_time[i], color = color_list[i%8], alpha=0.7)\n\n\nplt.legend([plt.Rectangle((0,0),1,1,fc=color_list[i%8], edgecolor = 'none') for i in range(len(label_cols))], label_cols, loc=1, ncol = 2, prop={'size':16})\n\n&lt;matplotlib.legend.Legend at 0x7f1f78271070&gt;\n\n\n\n\n\n\n\n누적 막대 그래프 상대값 시각화\n\nlabel_sum_percent = (label_sum_over_time / (1.*np.asarray(label_sum_over_time).max(axis=0))) * 100\n\n\nf, ax = plt.subplots(figsize=(30, 15))\nfor i in range(len(label_cols)):\n    sns.barplot(x=months, y=label_sum_percent[i], color = color_list[i%8], alpha=0.7)\n    \nplt.legend([plt.Rectangle((0,0),1,1,fc=color_list[i%8], edgecolor = 'none') for i in range(len(label_cols))], \\\n           label_cols, loc=1, ncol = 2, prop={'size':16})\n\n&lt;matplotlib.legend.Legend at 0x7f1f770de610&gt;\n\n\n\n\n\n\n상대값으로 보기 위해서 퍼센테이지 나눈거!\n\n\n\n신규 구매 데이터 생성 및 시각화\n\n책에서는 예측해야할 ’신규 구매’에 초점을 맞추고 있어서 새로운 데이터를 추출했다.—&gt; 일단 난 안할래 흠냐\n\n\n# 제품 변수를 prods에 list형태로 저장한다\nprods = trn.columns[24:].tolist()\n\n# 날짜를 숫자로 변환하는 함수이다. 2015-01-28은 1, 2016-06-28은 18로 변환된다\ndef date_to_int(str_date):\n    Y, M, D = [int(a) for a in str_date.strip().split(\"-\")]\n    int_date = (int(Y) - 2015) * 12 + int(M)\n    return int_date\n\n# 날짜를 숫자로 변환하여 int_date에 저장한다\ntrn['int_date'] = trn['fecha_dato'].map(date_to_int).astype(np.int8)\n\n# 데이터를 복사하고, int_date 날짜에 1을 더하여 lag를 생성한다. 변수명에 _prev를 추가한다.\ntrn_lag = trn.copy()\ntrn_lag['int_date'] += 1\ntrn_lag.columns = [col + '_prev' if col not in ['ncodpers', 'int_date'] else col for col in trn.columns]\n\n# 원본 데이터와 lag 데이터를 ncodper와 int_date 기준으로 합친다. Lag 데이터의 int_date는 1 밀려있기 때문에, 저번달의 제품 정보가 삽입된다.\ndf_trn = trn.merge(trn_lag, on=['ncodpers','int_date'], how='left')\n\n# 메모리 효율을 위해 불필요한 변수를 메모리에서 제거한다\ndel trn, trn_lag\n\n# 저번달의 제품 정보가 존재하지 않을 경우를 대비하여 0으로 대체한다.\nfor prod in prods:\n    prev = prod + '_prev'\n    df_trn[prev].fillna(0, inplace=True)\n\n# 원본 데이터에서의 제품 보유 여부 – lag데이터에서의 제품 보유 여부를 비교하여 신규 구매 변수 padd를 구한다\nfor prod in prods:\n    padd = prod + '_add'\n    prev = prod + '_prev'\n    df_trn[padd] = ((df_trn[prod] == 1) & (df_trn[prev] == 0)).astype(np.int8)\n\n# 신규 구매 변수만을 추출하여 labels에 저장한다.\nadd_cols = [prod + '_add' for prod in prods]\nlabels = df_trn[add_cols].copy()\nlabels.columns = prods\n#labels.to_csv('../input/labels.csv', index=False)\n\n\n# 코드 1-12. 신규 구매 누적 막대 그래프를 시각화하기\n\n#labels = pd.read_csv('../input/labels.csv').astype(int)\nfecha_dato = trn['fecha_dato']\n\nlabels['date'] = fecha_dato.fecha_dato\nmonths = np.unique(fecha_dato.fecha_dato).tolist()\nlabel_cols = labels.columns.tolist()[:24]\n\nlabel_over_time = []\nfor i in range(len(label_cols)):\n    label_over_time.append(labels.groupby(['date'])[label_cols[i]].agg('sum').tolist())\n    \nlabel_sum_over_time = []\nfor i in range(len(label_cols)):\n    label_sum_over_time.append(np.asarray(label_over_time[i:]).sum(axis=0))\n    \ncolor_list = ['#F5B7B1','#D2B4DE','#AED6F1','#A2D9CE','#ABEBC6','#F9E79F','#F5CBA7','#CCD1D1']\n\nf, ax = plt.subplots(figsize=(30, 15))\nfor i in range(len(label_cols)):\n    sns.barplot(x=months, y=label_sum_over_time[i], color = color_list[i%8], alpha=0.7)\n    \nplt.legend([plt.Rectangle((0,0),1,1,fc=color_list[i%8], edgecolor = 'none') for i in range(len(label_cols))], label_cols, loc=1, ncol = 2, prop={'size':16})\n\n&lt;matplotlib.legend.Legend at 0x7fb5f6211550&gt;\n\n\n\n\n\n\n# 코드 1-13. 신규 구매 누적 막대 그래프를 상대값으로 시각화하기\n\nlabel_sum_percent = (label_sum_over_time / (1.*np.asarray(label_sum_over_time).max(axis=0))) * 100\n\nf, ax = plt.subplots(figsize=(30, 15))\nfor i in range(len(label_cols)):\n    sns.barplot(x=months, y=label_sum_percent[i], color = color_list[i%8], alpha=0.7)\n    \nplt.legend([plt.Rectangle((0,0),1,1,fc=color_list[i%8], edgecolor = 'none') for i in range(len(label_cols))], \\\n           label_cols, loc=1, ncol = 2, prop={'size':16})\n\n&lt;matplotlib.legend.Legend at 0x7fb5f682a898&gt;"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Boram-coco",
    "section": "",
    "text": "Everyday with Coco"
  }
]